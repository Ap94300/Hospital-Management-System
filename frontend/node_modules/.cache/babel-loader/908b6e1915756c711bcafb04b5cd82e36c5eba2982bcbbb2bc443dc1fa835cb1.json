{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN STACK\\\\hospital system\\\\src\\\\components\\\\QA Bot.js\",\n  _s = $RefreshSig$();\n// components/QnABot.js\nimport React, { useState } from 'react';\nimport { OpenAI } from 'openai';\nimport './QA Bot.css'; // Import the CSS file\n\n// Sample hospital data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst hospitalsData = [\n  // ... (your hospital data)\n];\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: 'your-openai-api-key',\n  // Replace with your OpenAI API key\n  dangerouslyAllowBrowser: true // Allow browser usage (for frontend only)\n});\nconst QnABot = () => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [answer, setAnswer] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Function to retrieve relevant hospital data based on the query\n  const retrieveRelevantData = query => {\n    const lowerCaseQuery = query.toLowerCase();\n    return hospitalsData.filter(hospital => hospital.name.toLowerCase().includes(lowerCaseQuery) || hospital.city.toLowerCase().includes(lowerCaseQuery) || hospital.description.toLowerCase().includes(lowerCaseQuery));\n  };\n\n  // Function to generate an answer using OpenAI's GPT API\n  const generateAnswer = async (query, relevantData) => {\n    const prompt = `\n            You are a helpful hospital information assistant. Answer the following question based on the provided hospital data:\n            Question: ${query}\n            Hospital Data: ${JSON.stringify(relevantData)}\n        `;\n    const response = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [{\n        role: 'user',\n        content: prompt\n      }],\n      max_tokens: 150\n    });\n    return response.choices[0].message.content;\n  };\n\n  // Handle user query submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      // Step 1: Retrieve relevant hospital data\n      const relevantData = retrieveRelevantData(query);\n\n      // Step 2: Generate an answer using OpenAI's GPT API\n      const generatedAnswer = await generateAnswer(query, relevantData);\n      setAnswer(generatedAnswer);\n    } catch (error) {\n      console.error('Error generating answer:', error);\n      setAnswer('Sorry, something went wrong. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"qna-bot\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Hospital Q&A Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Ask a question about hospitals...\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Generating Answer...' : 'Ask'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Answer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(QnABot, \"5yiuvnDI1xKptig2Iky2Sq425RQ=\");\n_c = QnABot;\nexport default QnABot;\nvar _c;\n$RefreshReg$(_c, \"QnABot\");","map":{"version":3,"names":["React","useState","OpenAI","jsxDEV","_jsxDEV","hospitalsData","openai","apiKey","dangerouslyAllowBrowser","QnABot","_s","query","setQuery","answer","setAnswer","loading","setLoading","retrieveRelevantData","lowerCaseQuery","toLowerCase","filter","hospital","name","includes","city","description","generateAnswer","relevantData","prompt","JSON","stringify","response","chat","completions","create","model","messages","role","content","max_tokens","choices","message","handleSubmit","e","preventDefault","generatedAnswer","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","disabled","_c","$RefreshReg$"],"sources":["D:/MERN STACK/hospital system/src/components/QA Bot.js"],"sourcesContent":["// components/QnABot.js\r\nimport React, { useState } from 'react';\r\nimport { OpenAI } from 'openai';\r\nimport './QA Bot.css'; // Import the CSS file\r\n\r\n// Sample hospital data\r\nconst hospitalsData = [\r\n    // ... (your hospital data)\r\n];\r\n\r\n// Initialize OpenAI client\r\nconst openai = new OpenAI({\r\n    apiKey: 'your-openai-api-key', // Replace with your OpenAI API key\r\n    dangerouslyAllowBrowser: true, // Allow browser usage (for frontend only)\r\n});\r\n\r\nconst QnABot = () => {\r\n    const [query, setQuery] = useState('');\r\n    const [answer, setAnswer] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Function to retrieve relevant hospital data based on the query\r\n    const retrieveRelevantData = (query) => {\r\n        const lowerCaseQuery = query.toLowerCase();\r\n        return hospitalsData.filter(hospital => \r\n            hospital.name.toLowerCase().includes(lowerCaseQuery) ||\r\n            hospital.city.toLowerCase().includes(lowerCaseQuery) ||\r\n            hospital.description.toLowerCase().includes(lowerCaseQuery)\r\n        );\r\n    };\r\n\r\n    // Function to generate an answer using OpenAI's GPT API\r\n    const generateAnswer = async (query, relevantData) => {\r\n        const prompt = `\r\n            You are a helpful hospital information assistant. Answer the following question based on the provided hospital data:\r\n            Question: ${query}\r\n            Hospital Data: ${JSON.stringify(relevantData)}\r\n        `;\r\n\r\n        const response = await openai.chat.completions.create({\r\n            model: 'gpt-3.5-turbo',\r\n            messages: [{ role: 'user', content: prompt }],\r\n            max_tokens: 150,\r\n        });\r\n\r\n        return response.choices[0].message.content;\r\n    };\r\n\r\n    // Handle user query submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n\r\n        try {\r\n            // Step 1: Retrieve relevant hospital data\r\n            const relevantData = retrieveRelevantData(query);\r\n\r\n            // Step 2: Generate an answer using OpenAI's GPT API\r\n            const generatedAnswer = await generateAnswer(query, relevantData);\r\n            setAnswer(generatedAnswer);\r\n        } catch (error) {\r\n            console.error('Error generating answer:', error);\r\n            setAnswer('Sorry, something went wrong. Please try again.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"qna-bot\">\r\n            <h2>Hospital Q&A Bot</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={query}\r\n                    onChange={(e) => setQuery(e.target.value)}\r\n                    placeholder=\"Ask a question about hospitals...\"\r\n                    required\r\n                />\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? 'Generating Answer...' : 'Ask'}\r\n                </button>\r\n            </form>\r\n\r\n            {answer && (\r\n                <div className=\"answer\">\r\n                    <h3>Answer:</h3>\r\n                    <p>{answer}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QnABot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}