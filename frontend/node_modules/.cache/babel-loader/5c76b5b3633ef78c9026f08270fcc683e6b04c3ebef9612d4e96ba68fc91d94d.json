{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN STACK\\\\hospital system\\\\frontend\\\\src\\\\components\\\\QA Bot.js\",\n  _s = $RefreshSig$();\n// components/QnABot.js\nimport React, { useState } from 'react';\nimport './QA Bot.css'; // Import the CSS file\n\n// Sample hospital data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst hospitalsData = [{\n  id: 1,\n  name: 'All India Institute of Medical Sciences (AIIMS)',\n  city: 'New Delhi',\n  description: 'A premier medical institution providing comprehensive healthcare services.'\n}, {\n  id: 2,\n  name: 'Apollo Hospital',\n  city: 'Chennai',\n  description: 'One of the largest healthcare groups in Asia, known for its advanced medical technology.'\n}\n// ... (other hospital data)\n];\nconst QnABot = () => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [answer, setAnswer] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Function to retrieve relevant hospital data based on the query\n  const retrieveRelevantData = query => {\n    const lowerCaseQuery = query.toLowerCase();\n    return hospitalsData.filter(hospital => hospital.name.toLowerCase().includes(lowerCaseQuery) || hospital.city.toLowerCase().includes(lowerCaseQuery) || hospital.description.toLowerCase().includes(lowerCaseQuery));\n  };\n\n  // Function to generate an answer based on the query\n  const generateAnswer = async query => {\n    const lowerCaseQuery = query.toLowerCase();\n\n    // Handle greetings\n    if (lowerCaseQuery === 'hi' || lowerCaseQuery === 'hello') {\n      return 'Hello! How can I assist you today? ðŸ˜Š';\n    }\n\n    // Retrieve relevant hospital data\n    const relevantData = retrieveRelevantData(query);\n\n    // If no relevant data found, return a fallback message\n    if (relevantData.length === 0) {\n      return 'I\\'m sorry, I didn\\'t understand that. Can you please ask something else? ðŸ¤”';\n    }\n\n    // If relevant data is found, format the response\n    return relevantData.map(hospital => `${hospital.name} located in ${hospital.city}. ${hospital.description}`).join('\\n');\n  };\n  // Handle user query submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      // Generate an answer based on the query\n      const generatedAnswer = await generateAnswer(query);\n      setAnswer(generatedAnswer);\n    } catch (error) {\n      console.error('Error generating answer:', error);\n      setAnswer('Sorry, something went wrong. Please try again. ðŸ˜ž');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"qna-bot\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Hospital Q&A Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Ask a question about hospitals...\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Generating Answer...' : 'Ask'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Answer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 13\n  }, this);\n};\n_s(QnABot, \"5yiuvnDI1xKptig2Iky2Sq425RQ=\");\n_c = QnABot;\nexport default QnABot;\nvar _c;\n$RefreshReg$(_c, \"QnABot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","hospitalsData","id","name","city","description","QnABot","_s","query","setQuery","answer","setAnswer","loading","setLoading","retrieveRelevantData","lowerCaseQuery","toLowerCase","filter","hospital","includes","generateAnswer","relevantData","length","map","join","handleSubmit","e","preventDefault","generatedAnswer","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","disabled","_c","$RefreshReg$"],"sources":["D:/MERN STACK/hospital system/frontend/src/components/QA Bot.js"],"sourcesContent":["// components/QnABot.js\r\nimport React, { useState } from 'react';\r\nimport './QA Bot.css'; // Import the CSS file\r\n\r\n// Sample hospital data\r\nconst hospitalsData = [\r\n    { id: 1, name: 'All India Institute of Medical Sciences (AIIMS)', city: 'New Delhi', description: 'A premier medical institution providing comprehensive healthcare services.' },\r\n    { id: 2, name: 'Apollo Hospital', city: 'Chennai', description: 'One of the largest healthcare groups in Asia, known for its advanced medical technology.' },\r\n    // ... (other hospital data)\r\n];\r\n\r\nconst QnABot = () => {\r\n    const [query, setQuery] = useState('');\r\n    const [answer, setAnswer] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Function to retrieve relevant hospital data based on the query\r\n    const retrieveRelevantData = (query) => {\r\n        const lowerCaseQuery = query.toLowerCase();\r\n        return hospitalsData.filter(hospital => \r\n            hospital.name.toLowerCase().includes(lowerCaseQuery) ||\r\n            hospital.city.toLowerCase().includes(lowerCaseQuery) ||\r\n            hospital.description.toLowerCase().includes(lowerCaseQuery)\r\n        );\r\n    };\r\n\r\n    // Function to generate an answer based on the query\r\n    const generateAnswer = async (query) => {\r\n        const lowerCaseQuery = query.toLowerCase();\r\n\r\n        // Handle greetings\r\n        if (lowerCaseQuery === 'hi' || lowerCaseQuery === 'hello') {\r\n            return 'Hello! How can I assist you today? ðŸ˜Š';\r\n        }\r\n\r\n        // Retrieve relevant hospital data\r\n        const relevantData = retrieveRelevantData(query);\r\n\r\n        // If no relevant data found, return a fallback message\r\n        if (relevantData.length === 0) {\r\n            return 'I\\'m sorry, I didn\\'t understand that. Can you please ask something else? ðŸ¤”';\r\n        }\r\n\r\n        // If relevant data is found, format the response\r\n        return relevantData.map(hospital => (\r\n            `${hospital.name} located in ${hospital.city}. ${hospital.description}`\r\n        )).join('\\n');\r\n    };\r\n        // Handle user query submission\r\n        const handleSubmit = async (e) => {\r\n            e.preventDefault();\r\n            setLoading(true);\r\n    \r\n            try {\r\n                // Generate an answer based on the query\r\n                const generatedAnswer = await generateAnswer(query);\r\n                setAnswer(generatedAnswer);\r\n            } catch (error) {\r\n                console.error('Error generating answer:', error);\r\n                setAnswer('Sorry, something went wrong. Please try again. ðŸ˜ž');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n    \r\n        return (\r\n            <div className=\"qna-bot\">\r\n                <h2>Hospital Q&A Bot</h2>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={query}\r\n                        onChange={(e) => setQuery(e.target.value)}\r\n                        placeholder=\"Ask a question about hospitals...\"\r\n                        required\r\n                    />\r\n                    <button type=\"submit\" disabled={loading}>\r\n                        {loading ? 'Generating Answer...' : 'Ask'}\r\n                    </button>\r\n                </form>\r\n    \r\n                {answer && (\r\n                    <div className=\"answer\">\r\n                        <h3>Answer:</h3>\r\n                        <p>{answer}</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n    \r\n    export default QnABot;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,cAAc,CAAC,CAAC;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAG,CAClB;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,iDAAiD;EAAEC,IAAI,EAAE,WAAW;EAAEC,WAAW,EAAE;AAA6E,CAAC,EAChL;EAAEH,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,iBAAiB;EAAEC,IAAI,EAAE,SAAS;EAAEC,WAAW,EAAE;AAA2F;AAC3J;AAAA,CACH;AAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,MAAMgB,oBAAoB,GAAIN,KAAK,IAAK;IACpC,MAAMO,cAAc,GAAGP,KAAK,CAACQ,WAAW,CAAC,CAAC;IAC1C,OAAOf,aAAa,CAACgB,MAAM,CAACC,QAAQ,IAChCA,QAAQ,CAACf,IAAI,CAACa,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,cAAc,CAAC,IACpDG,QAAQ,CAACd,IAAI,CAACY,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,cAAc,CAAC,IACpDG,QAAQ,CAACb,WAAW,CAACW,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,cAAc,CAC9D,CAAC;EACL,CAAC;;EAED;EACA,MAAMK,cAAc,GAAG,MAAOZ,KAAK,IAAK;IACpC,MAAMO,cAAc,GAAGP,KAAK,CAACQ,WAAW,CAAC,CAAC;;IAE1C;IACA,IAAID,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,OAAO,EAAE;MACvD,OAAO,uCAAuC;IAClD;;IAEA;IACA,MAAMM,YAAY,GAAGP,oBAAoB,CAACN,KAAK,CAAC;;IAEhD;IACA,IAAIa,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;MAC3B,OAAO,8EAA8E;IACzF;;IAEA;IACA,OAAOD,YAAY,CAACE,GAAG,CAACL,QAAQ,IAC5B,GAAGA,QAAQ,CAACf,IAAI,eAAee,QAAQ,CAACd,IAAI,KAAKc,QAAQ,CAACb,WAAW,EACxE,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC;EACjB,CAAC;EACG;EACA,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBd,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACA;MACA,MAAMe,eAAe,GAAG,MAAMR,cAAc,CAACZ,KAAK,CAAC;MACnDG,SAAS,CAACiB,eAAe,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDlB,SAAS,CAAC,mDAAmD,CAAC;IAClE,CAAC,SAAS;MACNE,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,oBACIb,OAAA;IAAK+B,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACpBhC,OAAA;MAAAgC,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBpC,OAAA;MAAMqC,QAAQ,EAAEZ,YAAa;MAAAO,QAAA,gBACzBhC,OAAA;QACIsC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE/B,KAAM;QACbgC,QAAQ,EAAGd,CAAC,IAAKjB,QAAQ,CAACiB,CAAC,CAACe,MAAM,CAACF,KAAK,CAAE;QAC1CG,WAAW,EAAC,mCAAmC;QAC/CC,QAAQ;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC,eACFpC,OAAA;QAAQsC,IAAI,EAAC,QAAQ;QAACM,QAAQ,EAAEhC,OAAQ;QAAAoB,QAAA,EACnCpB,OAAO,GAAG,sBAAsB,GAAG;MAAK;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,EAEN1B,MAAM,iBACHV,OAAA;MAAK+B,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACnBhC,OAAA;QAAAgC,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBpC,OAAA;QAAAgC,QAAA,EAAItB;MAAM;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC7B,EAAA,CA9EAD,MAAM;AAAAuC,EAAA,GAANvC,MAAM;AAgFR,eAAeA,MAAM;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}